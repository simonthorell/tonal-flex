// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/main_app.proto

#include "main_app.pb.h"
#include "main_app.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace main_app {

static const char* MainApp_method_names[] = {
  "/main_app.MainApp/CheckConnection",
  "/main_app.MainApp/FetchConfigFiles",
  "/main_app.MainApp/UseConfigFile",
};

std::unique_ptr< MainApp::Stub> MainApp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MainApp::Stub> stub(new MainApp::Stub(channel, options));
  return stub;
}

MainApp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckConnection_(MainApp_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchConfigFiles_(MainApp_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UseConfigFile_(MainApp_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MainApp::Stub::CheckConnection(::grpc::ClientContext* context, const ::main_app::Empty& request, ::main_app::ConnectionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::main_app::Empty, ::main_app::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckConnection_, context, request, response);
}

void MainApp::Stub::async::CheckConnection(::grpc::ClientContext* context, const ::main_app::Empty* request, ::main_app::ConnectionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::main_app::Empty, ::main_app::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckConnection_, context, request, response, std::move(f));
}

void MainApp::Stub::async::CheckConnection(::grpc::ClientContext* context, const ::main_app::Empty* request, ::main_app::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::main_app::ConnectionStatus>* MainApp::Stub::PrepareAsyncCheckConnectionRaw(::grpc::ClientContext* context, const ::main_app::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::main_app::ConnectionStatus, ::main_app::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::main_app::ConnectionStatus>* MainApp::Stub::AsyncCheckConnectionRaw(::grpc::ClientContext* context, const ::main_app::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainApp::Stub::FetchConfigFiles(::grpc::ClientContext* context, const ::main_app::Empty& request, ::main_app::ConfigList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::main_app::Empty, ::main_app::ConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchConfigFiles_, context, request, response);
}

void MainApp::Stub::async::FetchConfigFiles(::grpc::ClientContext* context, const ::main_app::Empty* request, ::main_app::ConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::main_app::Empty, ::main_app::ConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchConfigFiles_, context, request, response, std::move(f));
}

void MainApp::Stub::async::FetchConfigFiles(::grpc::ClientContext* context, const ::main_app::Empty* request, ::main_app::ConfigList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchConfigFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::main_app::ConfigList>* MainApp::Stub::PrepareAsyncFetchConfigFilesRaw(::grpc::ClientContext* context, const ::main_app::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::main_app::ConfigList, ::main_app::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchConfigFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::main_app::ConfigList>* MainApp::Stub::AsyncFetchConfigFilesRaw(::grpc::ClientContext* context, const ::main_app::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchConfigFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainApp::Stub::UseConfigFile(::grpc::ClientContext* context, const ::main_app::ConfigName& request, ::main_app::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::main_app::ConfigName, ::main_app::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UseConfigFile_, context, request, response);
}

void MainApp::Stub::async::UseConfigFile(::grpc::ClientContext* context, const ::main_app::ConfigName* request, ::main_app::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::main_app::ConfigName, ::main_app::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseConfigFile_, context, request, response, std::move(f));
}

void MainApp::Stub::async::UseConfigFile(::grpc::ClientContext* context, const ::main_app::ConfigName* request, ::main_app::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UseConfigFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::main_app::Status>* MainApp::Stub::PrepareAsyncUseConfigFileRaw(::grpc::ClientContext* context, const ::main_app::ConfigName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::main_app::Status, ::main_app::ConfigName, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UseConfigFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::main_app::Status>* MainApp::Stub::AsyncUseConfigFileRaw(::grpc::ClientContext* context, const ::main_app::ConfigName& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUseConfigFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

MainApp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainApp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainApp::Service, ::main_app::Empty, ::main_app::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::main_app::Empty* req,
             ::main_app::ConnectionStatus* resp) {
               return service->CheckConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainApp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainApp::Service, ::main_app::Empty, ::main_app::ConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::main_app::Empty* req,
             ::main_app::ConfigList* resp) {
               return service->FetchConfigFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainApp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainApp::Service, ::main_app::ConfigName, ::main_app::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::main_app::ConfigName* req,
             ::main_app::Status* resp) {
               return service->UseConfigFile(ctx, req, resp);
             }, this)));
}

MainApp::Service::~Service() {
}

::grpc::Status MainApp::Service::CheckConnection(::grpc::ServerContext* context, const ::main_app::Empty* request, ::main_app::ConnectionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainApp::Service::FetchConfigFiles(::grpc::ServerContext* context, const ::main_app::Empty* request, ::main_app::ConfigList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainApp::Service::UseConfigFile(::grpc::ServerContext* context, const ::main_app::ConfigName* request, ::main_app::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace main_app

